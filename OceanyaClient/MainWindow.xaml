<Window x:Class="OceanyaClient.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:components="clr-namespace:OceanyaClient.Components"
        Title="Oceanya Online"
        Height="658" Width="510"
        Icon="/Resources/OceanyaO.ico"
        ResizeMode="NoResize"
        WindowStartupLocation="CenterScreen"
        WindowStyle="None"
        AllowsTransparency="True"
        Background="Transparent">

    <!-- 
      1) Copy over any resources from your InitialConfigurationWindow that 
         define the close button style, text styles, animations, etc.
      2) You can omit or customize these if you do not need them for MainWindow.
    -->
    <Window.Resources>
        <!-- Button style with a dark overlay on hover and press -->
        <Style x:Key="ModernButton" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#FF262626"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="BorderBrush" Value="#444444"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="12,5"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="ButtonBorder" 
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#FF3D3D3D" TargetName="ButtonBorder"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#FF171717" TargetName="ButtonBorder"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Close Button Style -->
        <Style x:Key="CloseButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="ButtonBorder" 
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#FFE81123" TargetName="ButtonBorder"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#FFC41E3A" TargetName="ButtonBorder"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Optional fade-in/out storyboards if you like:
             (Only needed if you want the same fade effect as in InitialConfigurationWindow) -->
        <Storyboard x:Key="FadeIn">
            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.3"/>
        </Storyboard>
        <Storyboard x:Key="FadeOut">
            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.3"/>
        </Storyboard>
    </Window.Resources>

    <!-- Optional fade-in trigger (remove if not desired) -->
    <Window.Triggers>
        <EventTrigger RoutedEvent="Window.Loaded">
            <BeginStoryboard Storyboard="{StaticResource FadeIn}"/>
        </EventTrigger>
    </Window.Triggers>

    <Window.Opacity>1</Window.Opacity>

    <!-- Outer border for the "rounded corners + black outline" look -->
    <Border BorderBrush="#222222" BorderThickness="1" CornerRadius="5">
        <Grid Margin="0,0,-1,-1">

            <!-- 
              OPTIONAL: If you want the same "blur" background effect behind your top bar,
              replicate these rectangles. Otherwise, remove them.
            -->
            <Rectangle x:Name="imgScienceBlur" 
                       HorizontalAlignment="Center" Width="527" Height="638" 
                       VerticalAlignment="Top" Margin="0,30,0,0">
                <Rectangle.Fill>
                    <ImageBrush ImageSource="/Resources/scoienceblur.jpg" Opacity="0.5"/>
                </Rectangle.Fill>
            </Rectangle>

            <Rectangle x:Name="imgScienceBlur_darken"
                       HorizontalAlignment="Center" Width="527" Height="638" 
                       VerticalAlignment="Top" Margin="0,30,0,0" Fill="#7F000000"/>

            <Rectangle HorizontalAlignment="Center" Width="369" Height="276"
                       VerticalAlignment="Top" Margin="0,-21,0,0">
                <Rectangle.Fill>
                    <ImageBrush ImageSource="/Resources/Logo_O.png" Stretch="Uniform" Opacity="0.1"/>
                </Rectangle.Fill>
            </Rectangle>

            <!-- Title Bar (the top bar) -->
            <Border Height="30" VerticalAlignment="Top" Background="#CC000000" MouseLeftButtonDown="DragWindow">
                <Grid>
                    <!-- Left side: Oceanya logo -->
                    <Rectangle HorizontalAlignment="Left" Width="129" Height="30" VerticalAlignment="Center">
                        <Rectangle.Fill>
                            <ImageBrush ImageSource="/Resources/Logo_Oceanya.png"/>
                        </Rectangle.Fill>
                    </Rectangle>

                    <!-- Close button on the right -->
                    <Button x:Name="CloseButton"
                            Content="✕"
                            HorizontalAlignment="Right"
                            Width="30"
                            Style="{StaticResource CloseButtonStyle}"
                            Click="CloseButton_Click"/>

                    <!-- Additional text or second part of the logo -->
                    <Rectangle HorizontalAlignment="Left" Width="157" Height="23" VerticalAlignment="Top" Margin="129,6,0,0">
                        <Rectangle.Fill>
                            <ImageBrush ImageSource="/Resources/Logo_Laboratories.png" Stretch="Uniform"/>
                        </Rectangle.Fill>
                    </Rectangle>
                </Grid>
            </Border>

            <!-- 
              Main Content: your original Canvas from MainWindow. 
              Move it down by giving it a top margin so it appears below the top bar. 
            -->
            <Canvas x:Name="MainCanvas" Margin="0,30,0,0" Background="#FF585858">
                <!-- 
                  The entire content from your original MainWindow's Canvas goes here.
                  Just place it exactly as before; only the top-level <Canvas> is changed 
                  to have Margin="0,30,0,0".
                -->


                <Rectangle x:Name="bgRectangleOOC" Height="333" Canvas.Left="287" Width="222" Fill="#FF8B8B8B"/>
                <components:OOCLog x:Name="OOCLogControl" DockPanel.Dock="Top" Height="298" Canvas.Left="287" Width="222"/>

                <Rectangle Height="18" Canvas.Left="426" Canvas.Top="318" Width="83" Fill="#FF4E5056" HorizontalAlignment="Left" VerticalAlignment="Center"/>

                <DockPanel x:Name="Dock_ICLog" Height="323" Width="232" Canvas.Left="55">
                    <DockPanel.Background>
                        <ImageBrush ImageSource="/Resources/LogBG.png"/>
                    </DockPanel.Background>
                </DockPanel>
                <components:ICLog x:Name="ICLogControl" DockPanel.Dock="Top" Height="298" Width="228" Canvas.Left="59" HorizontalAlignment="Center" VerticalAlignment="Center"/>

                <Image x:Name="imgShoutModifierBG" Height="42" Canvas.Left="2" Canvas.Top="296" Width="428" Source="/Resources/ObjectionButtonsBG.png" Stretch="None"/>
                <ToggleButton x:Name="HoldIt" Height="40" Width="102" Canvas.Left="4" Canvas.Top="298"
                              BorderBrush="{x:Null}" HorizontalAlignment="Left" VerticalAlignment="Top"
                              Padding="0,0,0,0" Checked="ToggleButton_Checked"
                              Focusable="False" IsTabStop="False">
                    <ToggleButton.Style>
                        <Style TargetType="{x:Type ToggleButton}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Grid>
                                            <Image x:Name="ButtonImage" Source="/Resources/Buttons/Hold It.png"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Setter TargetName="ButtonImage" Property="Source" Value="/Resources/Buttons/Hold It_Selected.png"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>

                <ToggleButton x:Name="Objection" Height="40" Width="102" Canvas.Left="111" Canvas.Top="298"
                              BorderBrush="{x:Null}" Padding="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top"
                              Checked="ToggleButton_Checked"
                              Focusable="False" IsTabStop="False">
                    <ToggleButton.Style>
                        <Style TargetType="{x:Type ToggleButton}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Grid>
                                            <Image x:Name="ButtonImage" Source="/Resources/Buttons/Objection.png"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Setter TargetName="ButtonImage" Property="Source" Value="/Resources/Buttons/Objection_Selected.png"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>

                <ToggleButton x:Name="TakeThat" Height="40" Width="102" Canvas.Left="218" Canvas.Top="298"
                              BorderBrush="{x:Null}" Padding="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top"
                              Checked="ToggleButton_Checked"
                              Focusable="False" IsTabStop="False">
                    <ToggleButton.Style>
                        <Style TargetType="{x:Type ToggleButton}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Grid>
                                            <Image x:Name="ButtonImage" Source="/Resources/Buttons/Take That.png"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Setter TargetName="ButtonImage" Property="Source" Value="/Resources/Buttons/Take That_Selected.png"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>

                <ToggleButton x:Name="Custom" Height="40" Width="102" Canvas.Left="324" Canvas.Top="298"
                              BorderBrush="{x:Null}" Padding="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center"
                              Checked="ToggleButton_Checked"
                              Focusable="False" IsTabStop="False">
                    <ToggleButton.Style>
                        <Style TargetType="{x:Type ToggleButton}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Grid>
                                            <Image x:Name="ButtonImage" Source="/Resources/Buttons/Custom.png"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Setter TargetName="ButtonImage" Property="Source" Value="/Resources/Buttons/Custom_Selected.png"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>

                <Button x:Name="btnAddClient" Height="24" Width="24" BorderBrush="{x:Null}" Foreground="{x:Null}" Padding="0"
                        HorizontalAlignment="Center" VerticalAlignment="Top"
                        Click="btnAddClient_Click" Canvas.Left="2" Canvas.Top="24">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Button}">
                                        <Grid>
                                            <Image x:Name="ButtonImage" Source="/Resources/Buttons/Plus.png" Stretch="Fill"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="ButtonImage" Property="Opacity" Value="0.7"/>
                                            </Trigger>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter TargetName="ButtonImage" Property="Opacity" Value="0.3"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Button.Style>
                </Button>

                <Button x:Name="btnRemoveClient" Height="24" Width="24" BorderBrush="{x:Null}" Foreground="{x:Null}" Padding="0"
                        HorizontalAlignment="Left" VerticalAlignment="Top"
                        Click="btnRemoveClient_Click" Canvas.Left="28" Canvas.Top="24">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Button}">
                                        <Grid>
                                            <Image x:Name="ButtonImage" Source="/Resources/Buttons/Minus.png" Stretch="Fill"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="ButtonImage" Property="Opacity" Value="0.7"/>
                                            </Trigger>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter TargetName="ButtonImage" Property="Opacity" Value="0.3"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Button.Style>
                </Button>

                <components:PageButtonGrid x:Name="EmoteGrid" Canvas.Left="2" Canvas.Top="48" BorderBrush="#FF545454" 
                                           Background="DimGray" BorderThickness="1" Width="50" Height="248"/>

                <Label x:Name="lblClients" Content="Clients" Height="24" Width="46" 
                       FontFamily="pack://application:,,,/Resources/Fonts/#Igiari Cyrillic" Foreground="White" 
                       Canvas.Left="4" Canvas.Top="2"/>

                <components:ICMessageSettings x:Name="ICMessageSettingsControl" Canvas.Top="343" 
                                              Width="509" Height="260" HorizontalAlignment="Center" VerticalAlignment="Center"/>

                <Rectangle Height="24" Canvas.Top="603" Width="509" Fill="#FF36393F" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                <CheckBox x:Name="chkSticky" Content="Sticky Effects" 
                          Canvas.Top="607" Foreground="White" FontFamily="Arial" FontSize="10" 
                          Width="82" Height="16" BorderBrush="Black" 
                          Checked="chkStickyEffects_Checked" Unchecked="chkStickyEffects_Checked" 
                          Canvas.Left="10" Focusable="False" IsTabStop="False" VerticalContentAlignment="Center"/>

                <Button x:Name="btnRefreshCharacters" Height="24" Width="24" 
                        BorderBrush="{x:Null}" Foreground="{x:Null}" Padding="0"
                        Canvas.Left="485" Canvas.Top="603"
                        Click="btnRefreshCharacters_Click">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Button}">
                                        <Grid>
                                            <Image x:Name="ButtonImage" Source="/Resources/Buttons/smallFolder.png" Stretch="Fill"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="ButtonImage" Property="Opacity" Value="0.7"/>
                                            </Trigger>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter TargetName="ButtonImage" Property="Opacity" Value="0.3"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Button.Style>
                </Button>

                <CheckBox x:Name="chkPosOnIniSwap" Content="Switch Pos on INISwap" 
                          Canvas.Top="607" Foreground="White" FontFamily="Arial" FontSize="10" 
                          Width="127" Height="16" BorderBrush="Black" 
                          Checked="chkPosOnIniSwap_Checked" Unchecked="chkPosOnIniSwap_Checked" 
                          Canvas.Left="97" Focusable="False" IsTabStop="False" VerticalContentAlignment="Center"/>

                <Button x:Name="btnDebug" Content="Button" Height="18" 
                        Canvas.Left="442" Canvas.Top="607" Width="38" 
                        Click="Button_Click" Visibility="Collapsed"/>
                <CheckBox x:Name="chkInvertLog" Content="Invert IC Logs" 
                    Canvas.Top="607" Foreground="White" FontFamily="Arial" FontSize="10" 
                    Width="127" Height="16" BorderBrush="Black" 
                    Checked="chkInvertLog_Checked" Unchecked="chkInvertLog_Checked" 
                    Canvas.Left="229" Focusable="False" IsTabStop="False" VerticalContentAlignment="Center" HorizontalAlignment="Center" VerticalAlignment="Top"/>
            </Canvas>
        </Grid>
    </Border>
</Window>
